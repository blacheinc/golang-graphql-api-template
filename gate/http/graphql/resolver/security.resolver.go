package resolver

// This file will be automatically regenerated based on the schema, any resolver implementations
// will be copied through when generating and any unknown code will be moved to the end.
// Code generated by github.com/99designs/gqlgen version v0.17.49

import (
	"context"
	"errors"
	"fmt"

	"cendit.io/auth/logic"
	"cendit.io/auth/schema"
	"cendit.io/garage/function"
	"cendit.io/garage/logger"
	"cendit.io/garage/primer/constant"
	"cendit.io/garage/primer/enum"
	"cendit.io/garage/primer/typing"
	"cendit.io/gate/http/graphql/exception"
	"cendit.io/gate/http/graphql/model"
	"cendit.io/gate/http/rest/interceptor"
)

// ModifySecuritySetting is the resolver for the modifySecuritySetting field.
func (r *mutationResolver) ModifySecuritySetting(ctx context.Context, input model.SecuritySettingInput) (model.RespondWithSecuritySetting, error) {
	logger.GetLogger().Debug(fmt.Sprintf(`START :: [%v] :: mutationResolver.modifySecuritySetting with input: %+v`, ctx.Value(typing.CtxTraceKey{}), function.Stringify(input)))

	act := schema.Activity{
		ID:          function.GenerateUUID(),
		Resolver:    "mutationResolver.ModifySecuritySetting",
		Payload:     function.Stringify(input),
		Description: "made an action to modify security setting",
		Error:       "",
		Status:      "",
	}
	act.Date()

	// access control
	auth, authObj, err := interceptor.Authorize(ctx)
	// we only expect a exception.Error here
	if err != nil && errors.As(err, &exception.Error{}) {
		intrusion := ctx.Value(typing.CtxIntrusionKey{}).(*typing.Intrusion)
		intrusion.Status = err.(exception.Error).Status
		return nil, exception.MakeGraphQLError(ctx, err.(exception.Error).Message, err.(exception.Error).Status, fmt.Sprintf(`[%v] :: {message}`, ctx.Value(typing.CtxTraceKey{})))
	}

	securitySetting, err := logic.ModifySecuritySetting(input, authObj.(schema.User))
	if err != nil {
		if errors.As(err, &exception.Error{}) {
			intrusion := ctx.Value(typing.CtxIntrusionKey{}).(*typing.Intrusion)
			intrusion.Status = err.(exception.Error).Status
			return exception.MakeSubgraphError(err.(exception.Error).Message, err.(exception.Error).Status, fmt.Sprintf(`[%v] :: {message}`, ctx.Value(typing.CtxTraceKey{})), function.Stringify(act)), nil
		}

		intrusion := ctx.Value(typing.CtxIntrusionKey{}).(*typing.Intrusion)
		intrusion.Status = constant.CodeISE

		return exception.MakeSubgraphError(`Something went wrong while saving your security settings! Please try again.`, constant.CodeISE, fmt.Sprintf(`[%v] :: {message} :: %s`, ctx.Value(typing.CtxTraceKey{}), err.Error()), function.Stringify(act)), nil
	}

	// log activity
	act.Role = auth.Role
	act.By = auth.ID
	act.Status = enum.Success
	if err := act.Insert(); err != nil {
		logger.GetLogger().Debug(`ACTIVITY LOG :: SAVE ERROR :: ` + err.Error())
	}

	logger.GetLogger().Debug(fmt.Sprintf(`END :: [%v] :: mutationResolver.modifySecuritySetting with input: %+v`, ctx.Value(typing.CtxTraceKey{}), function.Stringify(input)))

	var setting model.SecuritySetting
	function.Parse(securitySetting, &setting)

	return &model.ResponseWithSecuritySetting{
		Message: "Security settings saved.",
		Data:    &setting,
	}, nil
}
