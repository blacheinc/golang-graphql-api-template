package resolver

// This file will be automatically regenerated based on the schema, any resolver implementations
// will be copied through when generating and any unknown code will be moved to the end.
// Code generated by github.com/99designs/gqlgen version v0.17.49

import (
	"context"

	"cendit.io/auth/repository"
	"cendit.io/garage/function"
	"cendit.io/garage/xiao"
	graphql1 "cendit.io/gate/http/graphql"
	"cendit.io/gate/http/graphql/model"
)

// User is the resolver for the user field.
func (r *securitySettingResolver) User(ctx context.Context, obj *model.SecuritySetting) (*model.User, error) {
	if obj != nil && obj.UserID != "" {

		user, err := repository.User().FindByMap(context.Background(), xiao.SQLMaps{
			WMaps: []xiao.SQLMap{
				{
					Map: map[string]interface{}{
						"id": obj.UserID,
					},
					JoinOperator:       xiao.And,
					ComparisonOperator: xiao.Equal,
				},
			},
		}, true)
		if err == nil {
			u := model.User{}

			function.Parse(user, &u)

			return &u, nil
		}
	}
	return nil, nil
}

// SecuritySetting returns graphql1.SecuritySettingResolver implementation.
func (r *Resolver) SecuritySetting() graphql1.SecuritySettingResolver {
	return &securitySettingResolver{r}
}

type securitySettingResolver struct{ *Resolver }
